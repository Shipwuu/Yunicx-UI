local urls = {
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%201",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%204",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%203",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%202",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%205",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Chat%20SPY",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Animation"
}

local maxScriptsPerBatch = 10  -- Maximum number of scripts to execute per batch
local maxRetries = 10  -- Maximum number of retries for each URL

-- Function to load a script from a URL, with retries
local function loadScript(url)
    local numRetries = 0
    local success = false
    local result = nil

    repeat
        numRetries = numRetries + 1
        success, result = pcall(function()
            return game:HttpGet(url)
        end)

        if not success then
            warn("Failed to fetch script from URL: " .. url .. ", retrying...")
            wait(1)  -- Wait before retrying
        end
    until success or numRetries >= maxRetries

    return success, result
end

-- Execute scripts in batches
for i = 1, #urls, maxScriptsPerBatch do
    local batchScripts = {}

    -- Fetch scripts for the current batch
    for j = i, math.min(i + maxScriptsPerBatch - 1, #urls) do
        local url = urls[j]
        local success, scriptContent = loadScript(url)

        if success then
            print("URL: " .. url .. " ✅")
            table.insert(batchScripts, scriptContent)
        else
            print("URL: " .. url .. " ❌")
        end
    end

    -- Concatenate scripts in the batch
    local concatenatedScript = table.concat(batchScripts, "\n")

    -- Execute the concatenated script if there are scripts to execute
    if concatenatedScript ~= "" then
        local success, errorMessage = pcall(function()
            loadstring(concatenatedScript)()
        end)

        if not success then
            warn("Failed to execute batched script: " .. errorMessage)
        end
    else
        warn("No valid scripts in the batch to execute.")
    end

    -- Clear batchScripts table for the next batch
    batchScripts = {}
end
