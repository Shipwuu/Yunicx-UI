local urls = {
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%201",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%204",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%203",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%202",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%205",
    "https://raw.githubusercontent.com/Shipwuu/Yunicx-UI/main/Button%206"
}

local maxRetries = 10  -- Maximum number of retries for each URL

-- Function to load a script from a URL, with retries
local function loadScript(url)
    local numRetries = 0
    local success = false
    local result = nil

    repeat
        numRetries = numRetries + 1
        success, result = pcall(function()
            return game:HttpGet(url)
        end)

        if not success then
            warn("Failed to fetch script from URL: " .. url .. ", retrying... (" .. numRetries .. "/" .. maxRetries .. ")")
            wait(0.5)  -- Reduced wait time before retrying
        end
    until success or numRetries >= maxRetries

    return success, result
end

-- Function to fetch and execute scripts concurrently
local function fetchAndExecuteScripts(urls)
    local threads = {}
    local batchScripts = {}

    -- Create threads to fetch scripts concurrently
    for _, url in ipairs(urls) do
        table.insert(threads, coroutine.create(function()
            local success, scriptContent = loadScript(url)
            if success then
                print("URL: " .. url .. " ✅")
                table.insert(batchScripts, scriptContent)
            else
                print("URL: " .. url .. " ❌")
            end
        end))
    end

    -- Run all threads
    for _, thread in ipairs(threads) do
        coroutine.resume(thread)
    end

    -- Wait for all threads to complete
    for _, thread in ipairs(threads) do
        while coroutine.status(thread) ~= "dead" do
            wait(0.1)
        end
    end

    -- Concatenate and execute all scripts
    local concatenatedScript = table.concat(batchScripts, "\n")
    if concatenatedScript ~= "" then
        local success, errorMessage = pcall(function()
            loadstring(concatenatedScript)()
        end)
        if not success then
            warn("Failed to execute concatenated script: " .. errorMessage)
        end
    else
        warn("No valid scripts to execute.")
    end
end

fetchAndExecuteScripts(urls)
