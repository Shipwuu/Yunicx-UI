local animations = {
    idle = "rbxassetid://742637544",    -- Primary idle animation
    idleAlt = "rbxassetid://18537371272", -- Alternate idle animation
    walk = "rbxassetid://18537392113",    -- Walk animation
    run = "rbxassetid://656118852",     -- Run animation
    jump = "rbxassetid://656117878",    -- Jump animation
    fall = "rbxassetid://656115606",    -- Fall animation
    swim = "rbxassetid://1212980584",    -- Swim animation
    swimIdle = "rbxassetid://1212896824",  -- Swim idle animation
    climb = "rbxassetid://1083450842"    -- Climb animation
}

-- Function to replace the default animations
local function replaceAnimations()
    local player = game.Players.LocalPlayer
    local character = player.Character

    -- Check if character exists (might not be the case immediately after resetting)
    if character then
        -- Wait for the Animate script to load
        local animateScript = character:WaitForChild("Animate", 10)  -- Timeout after 10 seconds if not found

        -- Replace each animation
        for animationType, animationId in pairs(animations) do
            if animateScript:FindFirstChild(animationType) then
                for _, anim in ipairs(animateScript[animationType]:GetChildren()) do
                    if anim:IsA("Animation") then
                        anim.AnimationId = animationId
                    end
                end
            end
        end

        -- Handle alternate idle animation separately (if needed)
        local idle = animateScript:FindFirstChild("idle")
        if idle then
            local animAlt = idle:FindFirstChild("Animation2")
            if animAlt then
                animAlt.AnimationId = animations.idleAlt
            end
        end
    end
end

-- Function to ensure animations loop
local function ensureAnimationsLoop()
    local player = game.Players.LocalPlayer
    local character = player.Character

    -- Check if character exists (might not be the case immediately after resetting)
    if character then
        -- Wait for the Humanoid to load
        local humanoid = character:WaitForChild("Humanoid", 10)  -- Timeout after 10 seconds if not found

        -- Connect to the AnimationPlayed event
        humanoid.AnimationPlayed:Connect(function(animationTrack)
            -- Ensure the animation loops
            animationTrack.Looped = true
        end)
    end
end

-- Additional function to debug swimIdle animation (if needed)
local function debugSwimIdle()
    local player = game.Players.LocalPlayer
    local character = player.Character

    -- Check if character exists (might not be the case immediately after resetting)
    if character then
        local animateScript = character:WaitForChild("Animate", 10)  -- Timeout after 10 seconds if not found
        local swimIdle = animateScript:FindFirstChild("swimIdle")
        
        if swimIdle then
            for _, anim in ipairs(swimIdle:GetChildren()) do
                if anim:IsA("Animation") then
                    print("SwimIdle Animation ID:", anim.AnimationId)
                    anim.AnimationId = animations.swimIdle
                    print("Updated SwimIdle Animation ID:", anim.AnimationId)
                end
            end
        else
            print("swimIdle animation not found in Animate script.")
        end
    end
end

-- Function to execute animations on character respawn
local function onCharacterAdded(character)
    replaceAnimations()
    ensureAnimationsLoop()
    debugSwimIdle()
end

-- Connect the onCharacterAdded function to the CharacterAdded event
game.Players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- Execute the animations immediately upon script start
onCharacterAdded(game.Players.LocalPlayer.Character)

-- In case the script is executed after the character has already respawned, manually reapply animations
if game.Players.LocalPlayer.Character then
    replaceAnimations()
    ensureAnimationsLoop()
    debugSwimIdle()
end

print("✅ Animation Active ✅")
